{"remainingRequest":"/home/ahmedrampo/Desktop/snow-free/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/ahmedrampo/Desktop/snow-free/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ahmedrampo/Desktop/snow-free/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ahmedrampo/Desktop/snow-free/src/views/About.vue?vue&type=template&id=039c5b43&scoped=true&","dependencies":[{"path":"/home/ahmedrampo/Desktop/snow-free/src/views/About.vue","mtime":1589255384782},{"path":"/home/ahmedrampo/Desktop/snow-free/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ahmedrampo/Desktop/snow-free/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/ahmedrampo/Desktop/snow-free/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ahmedrampo/Desktop/snow-free/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}